                            | #######################################################################
                            | # Test for copying block of size 1;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45803000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20100000000000000 | 	irmovq $1, %rdx		# src and dst have 1 elements
0x014: 30f6c802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 803c01000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax
0x03d:                      | Loop1:
0x03d: c0f2ffffffffffffffff | 	iaddq $-1,%rdx
0x047: 765900000000000000   | 	jg do1
0x050: 70d200000000000000   | 	jmp fix1
0x059:                      | do1:
0x059: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x063: 62aa                 | 	andq %r10, %r10
0x065: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x06f: 718200000000000000   | 	jle nop11
0x078: c0f00100000000000000 | 	iaddq $1,%rax
0x082:                      | nop11:
                            | 
0x082: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10
0x08c: 62aa                 | 	andq %r10, %r10
0x08e: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)
0x098: 71ab00000000000000   | 	jle nop12
0x0a1: c0f00100000000000000 | 	iaddq $1,%rax
0x0ab:                      | nop12:
                            | 
0x0ab: c0f71000000000000000 | 	iaddq $16, %rdi
0x0b5: c0f61000000000000000 | 	iaddq $16, %rsi
0x0bf: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x0c9: 703d00000000000000   | 	jmp Loop1
0x0d2:                      | fix1:
0x0d2: c0f20100000000000000 | 	iaddq $1,%rdx
                            | 
0x0dc:                      | Loopf:
0x0dc: 6222                 | 	andq %rdx,%rdx
0x0de: 76f000000000000000   | 	jg dof
0x0e7: 703b01000000000000   | 	jmp Done
0x0f0:                      | dof:
0x0f0: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x0fa: 30f90000000000000000 | 	irmovq $0, %r9
0x104: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x10e: 62aa                 | 	andq %r10, %r10
0x110: 2689                 | 	cmovg %r8,%r9
0x112: 6090                 | 	addq %r9, %rax
                            | 
0x114: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x11e: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x128: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x132: 70dc00000000000000   | 	jmp Loopf
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x13b:                      | Done:
0x13b: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x13c:                      | End:
                            | #/* $end ncopy-ys */
0x13c:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 1.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x13c:                      | check:
                            | 	# Return value test
0x13c: 30fa0100000000000000 | 	irmovq $1,%r10
0x146: 61a0                 | 	subq %r10,%rax
0x148: 736401000000000000   | 	je checkb
0x151: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x15b: 70a202000000000000   | 	jmp cdone
0x164:                      | checkb:
                            | 	# Code length check
0x164: 30f03c01000000000000 | 	irmovq EndFun,%rax
0x16e: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x178: 6120                 | 	subq %rdx,%rax
0x17a: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x184: 6102                 | 	subq %rax,%rdx
0x186: 75a201000000000000   | 	jge checkm
0x18f: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x199: 70a202000000000000   | 	jmp cdone
0x1a2:                      | checkm:
0x1a2: 30f2c802000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x1ac: 30f3a802000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x1b6: 30f70100000000000000 | 	irmovq $1,%rdi  # Count
0x1c0: 6277                 | 	andq %rdi,%rdi
0x1c2: 732002000000000000   | 	je checkpre         # Skip check if count = 0
0x1cb:                      | mcloop:
0x1cb: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x1d5: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x1df: 6160                 | 	subq %rsi,%rax
0x1e1: 73fd01000000000000   | 	je  mok
0x1ea: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x1f4: 70a202000000000000   | 	jmp cdone
0x1fd:                      | mok:
0x1fd: 30f00800000000000000 | 	irmovq $8,%rax
0x207: 6002                 | 	addq %rax,%rdx	  # dest ++
0x209: 6003                 | 	addq %rax,%rbx    # src++
0x20b: 30f00100000000000000 | 	irmovq $1,%rax
0x215: 6107                 | 	subq %rax,%rdi    # cnt--
0x217: 76cb01000000000000   | 	jg mcloop
0x220:                      | checkpre:
                            | 	# Check for corruption
0x220: 30f2c002000000000000 | 	irmovq Predest,%rdx
0x22a: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x234: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x23e: 6120                 | 	subq %rdx,%rax
0x240: 735c02000000000000   | 	je checkpost
0x249: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x253: 70a202000000000000   | 	jmp cdone
0x25c:                      | checkpost:
                            | 	# Check for corruption
0x25c: 30f2d002000000000000 | 	irmovq Postdest,%rdx
0x266: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x270: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x27a: 6120                 | 	subq %rdx,%rax
0x27c: 739802000000000000   | 	je checkok
0x285: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x28f: 70a202000000000000   | 	jmp cdone
0x298:                      | checkok:
                            | 	# Successful checks
0x298: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x2a2:                      | cdone:
0x2a2: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2a8:                      | 	.align 8
0x2a8:                      | src:
0x2a8: 0100000000000000     | 	.quad 1
0x2b0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2c0:                      | 	.align 16
0x2c0:                      | Predest:
0x2c0: fadebc0000000000     | 	.quad 0xbcdefa
0x2c8:                      | dest:
0x2c8: abefcd0000000000     | 	.quad 0xcdefab
0x2d0:                      | Postdest:
0x2d0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x2d8:                      | .align 8
                            | # Run time stack
0x2d8: 0000000000000000     | 	.quad 0
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
0x328: 0000000000000000     | 	.quad 0
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
                            | 
0x358:                      | Stack:
