# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

# Sample linked list
    .align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

# long sum_list(list_ptr ls)
# {
#     long val = 0;
#     while (ls) {
# 	val += ls->val;
# 	ls = ls->next;
#     }
#     return val;
# }
# typedef struct ELE {
#     long val;
#     struct ELE *next;
# } *list_ptr;

main:
    irmovq ele1,%rdi
    call sum_list
    ret

# ls in %rdi
sum_list:
    irmovq $0,%rax
loop:
    andq %rdi,%rdi
    je done
    mrmovq (%rdi),%r8
    addq %r8,%rax
    mrmovq 8(%rdi),%rdi
    jmp loop
done:
    ret

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
